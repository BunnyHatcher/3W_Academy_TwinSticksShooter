#pragma kernel computeGrid
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel computeGridForMesh
#pragma kernel computeMesh
#pragma kernel filterSolidsPerChunk
#pragma kernel compactPointCloud
#pragma kernel optimizePointCloud
#pragma kernel generatePointCloudMicroVoxels
#pragma kernel optimizeMicrovoxels
#pragma kernel computeGridMip3
#pragma kernel computeMeshRealTime
#pragma kernel computeMeshRealTime2
#pragma kernel compactSmoothMesh
#pragma kernel optimizeSmoothMesh
#pragma kernel computeGridForMeshSkinned
#pragma kernel computeMeshSkinned1
#pragma kernel computeMeshSkinned2
#pragma kernel computeMeshSkinned3
RWStructuredBuffer<int> indirectChunkArgs2,indirectChunkArgs1;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int> boundingBox;RWStructuredBuffer<int2> pointCloudDataMip3;RWStructuredBuffer<int> gridPointersMip2,gridPointersMip3;RWStructuredBuffer<int2> chunkPointCloudData;RWStructuredBuffer<int> pointCloudDataToSolidId,chunkPointCloudDataToSolidId;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float3> chunksCenter;RWStructuredBuffer<int> numPointsInChunk,pointToChunkId;RWStructuredBuffer<float2> gridDataLowRes;RWStructuredBuffer<int> volumetricDraw,chunkIdOffset,microvoxelCounters;RWStructuredBuffer<int2> pointCloudDataMip3Opt;RWStructuredBuffer<int> gridPointersMip2Opt,gridPointersMip3Opt;RWStructuredBuffer<float3> meshPointsOpt;RWStructuredBuffer<float4> meshNormalsOpt;RWStructuredBuffer<float3> chunksCenterGlob;RWStructuredBuffer<int> boundingBoxGlob,instancesMatrixGlob,instancesMatrixInvGlob,microvoxelCountersGlob,chunkIdOffsetGlob,gridPointersMip3Glob,gridPointersMip2Glob;RWStructuredBuffer<int2> pointCloudDataMip3Glob;RWStructuredBuffer<int> chunkIdToContainerIdGlob,localChunkIdGlob,instanceToContainerIdGlob;StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs,solidsAttrs2;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;RWStructuredBuffer<float3> meshOutNormals;RWStructuredBuffer<float> meshOutSkinWeights;
#define MAXBONES 16
#define NUMWEIGHTSELEMENTS (MAXBONES*2)
struct BoneWeightData{float w[MAXBONES];};RWStructuredBuffer<BoneWeightData> skinWeightsGrid,skinBonesGrid;RWStructuredBuffer<float3> meshPoints;RWStructuredBuffer<float4> meshNormals;RWStructuredBuffer<float3> meshNormalsTemp;RWStructuredBuffer<int3> smoothMeshGridData;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;int numChunksX=0,numChunksY=0,numChunksZ=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int storeSolidId=0,maxPointCount=0;float seamOffsetMultiplier=1.,bufferSizeReduceFactor=1.,globalBlendReduce=0.;int globalChunkId=0,numChunks=0;float meshNormalSmooth,meshVoxelize;groupshared int3 gs_pointCloudData[255];groupshared uint gs_numElements=0,gs_globalOffset=0;
#include"claySDF.compute"
static const int3 cellTable[]={int3(0,0,0),int3(0,0,1),int3(0,0,2),int3(0,0,3),int3(0,1,0),int3(0,1,1),int3(0,1,2),int3(0,1,3),int3(0,2,0),int3(0,2,1),int3(0,2,2),int3(0,2,3),int3(0,3,0),int3(0,3,1),int3(0,3,2),int3(0,3,3),int3(1,0,0),int3(1,0,1),int3(1,0,2),int3(1,0,3),int3(1,1,0),int3(1,1,1),int3(1,1,2),int3(1,1,3),int3(1,2,0),int3(1,2,1),int3(1,2,2),int3(1,2,3),int3(1,3,0),int3(1,3,1),int3(1,3,2),int3(1,3,3),int3(2,0,0),int3(2,0,1),int3(2,0,2),int3(2,0,3),int3(2,1,0),int3(2,1,1),int3(2,1,2),int3(2,1,3),int3(2,2,0),int3(2,2,1),int3(2,2,2),int3(2,2,3),int3(2,3,0),int3(2,3,1),int3(2,3,2),int3(2,3,3),int3(3,0,0),int3(3,0,1),int3(3,0,2),int3(3,0,3),int3(3,1,0),int3(3,1,1),int3(3,1,2),int3(3,1,3),int3(3,2,0),int3(3,2,1),int3(3,2,2),int3(3,2,3),int3(3,3,0),int3(3,3,1),int3(3,3,2),int3(3,3,3)},localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int3 neighbourMip3[27]={int3(0,0,0),int3(0,1,0),int3(0,-1,0),int3(1,0,0),int3(-1,0,0),int3(0,0,1),int3(0,0,-1),int3(1,1,1),int3(0,1,1),int3(-1,1,1),int3(1,1,-1),int3(0,1,-1),int3(-1,1,-1),int3(1,1,0),int3(-1,1,0),int3(1,-1,1),int3(0,-1,1),int3(-1,-1,1),int3(1,-1,-1),int3(0,-1,-1),int3(-1,-1,-1),int3(1,-1,0),int3(-1,-1,0),int3(1,0,1),int3(-1,0,1),int3(1,0,-1),int3(-1,0,-1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};
#define WEIGHTSTABLE 16
static const float weightsTable[256]={1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.};int f(int x,int i,int y,int z){return x+z*(i+z*y);}uint f(float3 i){uint t=uint(i.x*255)+uint(i.y*255)*256+uint(i.z*255)*256*256;return t;}uint f(uint i,uint x,uint y,uint z,uint t){uint e=(((i<<6|x)<<6|y)<<6|z)<<8|t;return e;}uint s(uint i,uint x,uint y,uint z,uint t){uint e=(((i<<6|x)<<8|y)<<8|z)<<4|t;return e;}uint f(uint i,uint x,uint t){uint e=(i<<6|x)<<18|t;return e;}uint f(uint f,uint t){uint e=f<<24|t;return e;}void s(int f,out int s[5]){s[4]=f&255,f>>=8,s[3]=f&63,f>>=6,s[2]=f&63,f>>=6,s[1]=f&63,f>>=6,s[0]=f&63;}uint s(float i,float y,float x,float z){uint r=uint(round(i*63.)),f=uint(round(y*63.)),u=uint(round(x*63.)),t=uint((z+1.)*.5*16383.),e=((r<<6|f)<<6|u)<<14|t;return e;}float4 s(uint i){float f=float(i&16383)/16383*2.-1.;i>>=14;float y=float(i&63)/63;i>>=6;float x=float(i&63)/63,u=float(i>>6)/63;return float4(u,x,y,f);}float t(float3 i,float3 t){float3 u=abs(i)-t;return max(u.x,max(u.y,u.z));}float t(float i,float f,float x,float e){float c=max(x-abs(i-f),0.);return min(i,f)-c*c*.25f*e;}float c(float x,float i,float y,float e){float c=max(y-abs(-x-i),0.);return max(-x,i)+c*c*.25*e;}bool c(uint e,uint f){uint x=f*rcp(32);int i=solidsFilter[e*maxSolidsPerVoxelMask+x],u=f-32*x;bool t=false;if(i>>u&1)t=true;return t;}void r(uint e,uint f){uint x=f/32;int c=solidsFilter[e*maxSolidsPerVoxelMask+x],i=f-32*x;solidsFilter[e*maxSolidsPerVoxelMask+x]=c&~(1<<i);}bool c(int x){return x>>0&1;}bool r(int x){return x>>2&1;}bool t(int x){return x>>3&1;}float c(float3 i,float x,float y,uint e,uint f){float s=999.;uint z=f*maxSolidsPerVoxel;float u=999.,m=0.,g=0.;bool M=false;for(uint o=0;o<e;++o){uint n=prefilteredSolidIds[z+o];float3 S=solidsScale[n];float k=(S.x+S.y+S.z)*.333333,v=solidsBlend[n],a=rcp(v);float4 b=solidsAttrs[n],d=solidsAttrs2[n];bool D=true;float p=999.;if(r(b.w))y+=abs(v),u=s,s=999.,m=v,g=a,D=false,M=true,v=0.,a=1.;else if(t(b.w))p=s,s=u,v=m,a=g,D=false,M=false;if(D)p=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],S,b,d,k);if(!c(b.w)){if(v==0.)s=min(p,s);else if(v>0.)s=t(p,s,v,a);else s=c(p,s,abs(v),abs(a));}if(D&&p>y)r(f,o);if(D)y-=abs(v);}return s;}float c(float3 i,float x,float y,out int f,out float3 m,uint e,uint s,uint z){float u=999.;m=float3(1.,1.,1.);uint n=s*maxSolidsPerVoxel;float g=999.,v=0.,a=0.;float3 M=0.;bool k=false;int S=0,d=0;for(uint o=0;o<e;++o){if(!c(s,o)){continue;}uint p=prefilteredSolidIds[n+o];float3 b=solidsScale[p];float D=(b.x+b.y+b.z)*.333333,w=solidsBlend[p],N=rcp(w);float3 l=solidsColor[p];float4 h=solidsAttrs[p],X=solidsAttrs2[p];bool B=true;float W=999.;if(r(h.w))g=u,u=999.,v=w,a=N,M=m,B=false,k=true,S=p,d=f;else if(t(h.w))W=u,u=g,w=v,N=a,p=S,B=false,k=false;if(B)W=computeClayDistanceFunction(solidsType[p],i,solidsPos[p],solidsRot[p],b,h,X,D);if(!k&&W<u)f=p;float Y=0.;bool Z=c(h.w);if(w==0.){Y=clamp((u-W)*y,0.,1.);if(!Z)u=min(W,u);}else if(w>0.){Y=1.-clamp(.5+.5*(W-u)*N,0.,1.);if(!Z)u=t(W,u,w,N);}else{Y=1.-clamp(.5+.5*(-W-u)*N,0.,1.);if(!Z)u=c(W,u,abs(w),abs(N));if(Y>.5)f=p;}if(!B)l=lerp(M,m,Y),Y=1.-Y;m=lerp(m,l,Y);}return u;}float f(float3 i,float x,float y,out int f,out float3 m,uint e,uint s,uint z){float u=999.;m=float3(1.,1.,1.);uint n=s*maxSolidsPerVoxel;float g=999.,v=0.,a=0.;float3 M=0.;bool k=false;int S=0,d=0,p=0,b=0;for(uint o=0;o<e;++o){if(!c(s,o)){continue;}uint l=prefilteredSolidIds[n+o];float3 w=solidsScale[l];float D=(w.x+w.y+w.z)*.333333,Y=solidsBlend[l],N=rcp(Y);float3 W=solidsColor[l];float4 h=solidsAttrs[l],B=solidsAttrs2[l];bool Z=true;float X=999.;if(r(h.w))g=u,u=999.,v=Y,a=N,M=m,Z=false,k=true,S=l,d=f,p=b;else if(t(h.w))X=u,u=g,Y=v,N=a,l=S,Z=false,k=false;if(Z)X=computeClayDistanceFunction(solidsType[l],i,solidsPos[l],solidsRot[l],w,h,B,D);if(!k&&X<u)f=l;float C=0.;bool O=c(h.w);if(Y==0.){C=clamp((u-X)*y,0.,1.);if(!O)u=min(X,u);}else if(Y>0.){C=1.-clamp(.5+.5*(X-u)*N,0.,1.);if(!O)u=t(X,u,Y,N);}else{C=1.-clamp(.5+.5*(-X-u)*N,0.,1.);if(!O)u=c(X,u,abs(Y),abs(N));if(C>.5)f=l;}if(!Z)W=lerp(M,m,C),C=1.-C;m=lerp(m,W,C);if(b<MAXBONES){if(!k&&Z&&C>0.){for(int R=0;R<MAXBONES;++R)skinWeightsGrid[z].w[R]=lerp(skinWeightsGrid[z].w[R],weightsTable[b*WEIGHTSTABLE+R],C);skinBonesGrid[z].w[b]=l;b+=1;}else if(!k&&!Z&&C<1.){for(int R=0;R<MAXBONES;++R)skinWeightsGrid[z].w[R]=lerp(weightsTable[p*WEIGHTSTABLE+R],skinWeightsGrid[z].w[R],C);skinBonesGrid[z].w[b]=l;b+=1;}}}return u;}float3 d(uint i){int u=(i&255)>>0,f=(i&65280)>>8,M=(i&16711680)>>16;return float3(u/255.,f/255.,M/255.);}int3 m(uint i){int x=(i&255)>>0,u=(i&65280)>>8,f=(i&16711680)>>16;return int3(x,u,f);}bool n(int3 i){if(i.x<0)return true;if(i.x>255)return true;if(i.y<0)return true;if(i.y>255)return true;if(i.z<0)return true;if(i.z>255)return true;return false;}float p(int4 x){float t=0.;for(uint f=0;f<numSolids;++f)t+=abs(solidsBlend[f]);return t;}float3 d(int3 x,float i){float t=i*.5,f=chunkSize*.5;float3 e=float3(i*x.x-f,i*x.y-f,i*x.z-f)+t;return e;}void d(float3 f,float x,uint c,inout uint i,inout float z){uint e=numSolidsPerChunk[chunkId],u=c*maxSolidsPerVoxel;int y=c*maxSolidsPerVoxelMask;float s=0.,S=0.;bool M=false;float n=0.,m=2.-globalBlendReduce;uint o=0;for(o=0;o<e;++o){uint p=solidsPerChunk[chunkId*maxSolids+o];float g=abs(solidsBlend[p]),D=solidsAttrs[p].w;float3 v=f;if(int(D)>>1&1)v.x=abs(v.x);float3 k=solidsScale[p],a=solidsPos[p];float4 w=solidsRot[p];float3 b=v-a,d=mulQuat(b,w);float Y=t(d,k)-x*1.732;if(Y<m){n+=g;if(n>1.){n=1.;break;}}}float g=m*n;for(o=0;o<e;++o){uint p=solidsPerChunk[chunkId*maxSolids+o];solidsFilter[y+o*rcp(32)]=-1;float3 k=solidsScale[p];float D=solidsAttrs[p].w;float3 v=f;if(int(D)>>1&1)v.x=abs(v.x);float a=abs(solidsBlend[p]);float3 d=solidsPos[p];float4 w=solidsRot[p];float3 b=v-d,Y=mulQuat(b,w);float W=t(Y,k)-x*1.732*2.;if(M)s+=g,S+=a;bool N=true;if(r(D))s=0.,S=0.,W=0.,M=true;else if(t(D))g=s,a=S,W=0.,N=false,M=false;if(W<g){prefilteredSolidIds[u+i]=p;i+=1;if(N)z+=g;if(i==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float x=chunkSize*.5,u=chunkSize*.015625,o=u*.5,s=chunkSize*.00390625,M=s*.5,a=u*1.732,m=rcp(s);float3 t=float3(u*i.x-x,u*i.y-x,u*i.z-x);int y=f(i.x,i.y,i.z,64);float3 e=chunksCenter[chunkId];uint z=0;float S=0.;float3 k=t+o+e;d(k,u*.5,y,z,S);float b=c(k,u,S+u,z,y);gridDataLowRes[y]=float2(b,z);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridMip3(uint3 i:SV_DispatchThreadID){float x=chunkSize*.5,u=chunkSize*.015625,s=chunkSize*.00390625,y=s*.5,z=u*1.732,M=rcp(s);int e=f(i.x/4,i.y/4,i.z/4,64),p=f(i.x,i.y,i.z,256);float2 t=gridDataLowRes[e];float S=t.x;int m=t.y;gridData[p]=float3(S,0,0);if(abs(S)<z){int n=0;float3 k=float3(1.,1.,1.),r=i*s+s-y-x,o=chunksCenter[chunkId];float b=c(r+o,y,M,n,k,m,e,p);int D=solidsClayObjectId[n]+1;gridData[p]=float3(b,f(k),D);}}float m(float f,float c){float i=c-f,u=.5;if(i!=0.)u=f/i;return u;}float2 i(float2 i){float2 e=i.xy>=0.?1.:-1.,u=(1.-abs(i.yx))*e;return u;}float g(float2 i){int u=32;float f=floor(i.x*(u-1)),e=floor(i.y*(u-1)),t=f*u+e;return t;}float k(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:i(f.xy);f.xy=f.xy*.5+.5;float e=g(f.xy);return e;}int d(uint f,uint x,uint y,uint t){int e=f<<24|x<<16|y<<8|t;return e;}uint g(uint i,uint x,uint y,uint t){uint e=((i<<6|x)<<6|y)<<14|t;return e;}uint i(uint i,uint x,uint y,uint t){uint e=((i<<5|x)<<4|y)<<18|t;return e;}float e(float3 i){float e=dot(round(i*255),float3(65536,256,1));return e;}void e(int3 u,float x){if(u.x>254||u.y>254||u.z>254||u.x<1||u.y<1||u.z<1){return;}int e=f(u.x,u.y,u.z,256);float3 s=gridData[e];if(s.z==0.){return;}float n[8];uint c=0;for(int z=0;z<8;++z){int3 M=u+localGridCellCoords[z];int y=f(M.x,M.y,M.z,256);float3 t=gridData[y];if(t.z==0.){return;}n[z]=t.x;if(t.x<=0.)c|=1<<z;}int t=cubeEdgeFlags[c];if(t==0){return;}int y=c*16,p=triangleConnectionTable[y+3];float g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);float3 S=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];p=triangleConnectionTable[y+4];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);float3 o=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];p=triangleConnectionTable[y+5];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);float3 b=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p],M=S+o+b,r=cross(b-S,o-S);if(dot(r,r)>0.){p=triangleConnectionTable[y];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);S=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];p=triangleConnectionTable[y+1];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);o=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];p=triangleConnectionTable[y+2];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);b=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];r+=cross(b-S,o-S);p=triangleConnectionTable[y+6];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);S=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];p=triangleConnectionTable[y+7];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);o=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];p=triangleConnectionTable[y+8];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);b=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];r+=cross(b-S,o-S);p=triangleConnectionTable[y+9];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);S=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];p=triangleConnectionTable[y+10];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);o=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];p=triangleConnectionTable[y+11];g=m(n[edgeConnection[p].x],n[edgeConnection[p].y]);b=vertexOffset[edgeConnection[p].x]-g*edgeDirection[p];r+=cross(b-S,o-S);r=normalize(r);M/=3;int D=s.y,a=s.z;float3 k=M-float3(.5,.5,.5);float v=dot(k,r);float3 R=r;R/=abs(R.x)+abs(R.y)+abs(R.z);R.xy=R.z>=0.?R.xy:i(R.xy);R.xy=R.xy*.5+.5;v=v*.5+.5;int3 w=m(D);int Y=0;InterlockedAdd(gs_numElements,1,Y);if(Y<255)gs_pointCloudData[Y]=int3(d(u.x,u.y,u.z,uint(round(R.x*255.))),f(uint(round(v*63.)),uint(round(w.x/256.*63.)),uint(round(w.y/256.*63.)),uint(round(w.z/256.*63.)),uint(round(R.y*255.))),a);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 u:SV_DispatchThreadID,uint c:SV_GroupIndex){if(u.x>254||u.y>254||u.z>254||u.x<1||u.y<1||u.z<1){return;}float e=chunkSize/256;int p=f(u.x,u.y,u.z,256);float3 s=gridData[p];if(s.z==0.){return;}float n[8];uint x=0;for(int y=0;y<8;++y){int3 M=u+localGridCellCoords[y];int t=f(M.x,M.y,M.z,256);float3 g=gridData[t];if(g.z==0.){return;}n[y]=g.x;if(g.x<=0.)x|=1<<y;}int t=cubeEdgeFlags[x];if(t==0){return;}int z=x*16,r=triangleConnectionTable[z+3];float g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);float3 S=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[z+4];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);float3 o=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[z+5];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);float3 b=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r],M=S+o+b,v=cross(b-S,o-S);if(dot(v,v)>0.){r=triangleConnectionTable[z];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);S=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[z+1];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);o=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[z+2];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);b=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];v+=cross(b-S,o-S);r=triangleConnectionTable[z+6];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);S=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[z+7];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);o=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[z+8];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);b=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];v+=cross(b-S,o-S);r=triangleConnectionTable[z+9];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);S=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[z+10];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);o=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[z+11];g=m(n[edgeConnection[r].x],n[edgeConnection[r].y]);b=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];v+=cross(b-S,o-S);v=normalize(v);M/=3;int D=s.y,a=s.z;float3 k=M-float3(.5,.5,.5);float R=dot(k,v);float3 w=v;w/=abs(w.x)+abs(w.y)+abs(w.z);w.xy=w.z>=0.?w.xy:i(w.xy);w.xy=w.xy*.5+.5;R=R*.5+.5;int3 Y=m(D);uint l=0;InterlockedAdd(numPointsInChunk[chunkId],3,l);l/=3;int2 W=int2(d(u.x,u.y,u.z,uint(round(w.x*255.))),f(uint(round(R*63.)),uint(round(Y.x/256.*63.)),uint(round(Y.y/256.*63.)),uint(round(Y.z/256.*63.)),uint(round(w.y*255.))));chunkPointCloudData[chunkId*maxPointCount+l]=W;if(storeSolidId==1)chunkPointCloudDataToSolidId[chunkId*maxPointCount+l]=a;}}int4 v(uint f){uint i=f>>24,u=(16711680&f)>>16,y=(65280&f)>>8,z=255&f;return int4(i,u,y,z);}void g(uint f,uint t){uint p=f/5,i=round(float(float(f)/5.-p)*5),m=pointToChunkId[p],s[5];s[0]=m&63;m>>=6;s[1]=m&63;m>>=6;s[2]=m&63;m>>=6;s[3]=m&63;m>>=6;s[4]=m&63;s[i]=t;uint c=(((s[4]<<6|s[3])<<6|s[2])<<6|s[1])<<6|s[0];pointToChunkId[p]=c;}uint i(uint f,uint x){uint g=f/5,i=6*round(float(float(f)/5.-g)*5),u=(1<<6)-1&x>>i;return u;}[numthreads(1,1,1)]void compactPointCloud(int3 f:SV_DispatchThreadID){int i=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;uint u=numPointsInChunk[i],m;InterlockedAdd(indirectDrawArgs[0],u,m);uint e=u/3;m/=3;for(uint x=0;x<e;++x){uint p=m+x;pointCloudDataMip3[p]=chunkPointCloudData[i*maxPointCount+x];g(p,i);if(storeSolidId==1)pointCloudDataToSolidId[p]=chunkPointCloudDataToSolidId[i*maxPointCount+x];}}[numthreads(1,1,1)]void optimizePointCloud(int3 c:SV_DispatchThreadID){uint f=indirectDrawArgs[0],u=f/3,p=u;for(uint r=0;r<u;++r){int4 s=v(pointCloudDataMip3[r].x);float e=frac(sin(dot(float2(s.x,s.y),float2(12.9898,78.233+s.z)))*43758.5);uint x=round(e*(p-1));p-=1;uint z=i(p,pointToChunkId[p/5]);int2 t=pointCloudDataMip3[p];pointCloudDataMip3[p]=pointCloudDataMip3[x];pointCloudDataMip3[x]=t;uint y=i(x,pointToChunkId[x/5]);g(p,y);g(x,z);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 i:SV_DispatchThreadID){}float4 a(uint i){int u=(i&255)>>0,f=(i&65280)>>8,M=(i&16711680)>>16;return float4(u/255.,f/255.,M/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMesh(int3 i:SV_DispatchThreadID){float x=chunkSize/64;float3 u=d(i,x);int y=f(i.x,i.y,i.z,64);float3 e=chunksCenter[chunkId];uint s=0;float z=0.;d(u+e,x*.5,y,s,z);float g=x*.25,S=g*.5,M=x*.5,D=chunkSize/256,o=chunkSize*.5;int p=y*maxSolidsPerVoxelMask;for(uint m=0;m<maxSolidsPerVoxelMask;++m)solidsFilter[p+m]=-1;float t=c(u+e,x,z+x,s,y);for(uint r=0;r<8;++r){float3 v=u+g*cardinalCellOffset[r];for(uint b=0;b<8;++b){float3 n=v+S*cardinalCellOffset[b];int3 k=int3(round((n.x+o-S)/D),round((n.y+o-S)/D),round((n.z+o-S)/D));int a=f(k.x,k.y,k.z,256);gridData[a]=float3(0,0,0);int l=0;float3 w=float3(1.,1.,1.);float Y=c(n+e,S,rcp(g),l,w,s,y,a);int N=solidsClayObjectId[l]+1;gridData[a]=float3(Y,f(w),N);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMeshSkinned(int3 i:SV_DispatchThreadID){float x=chunkSize/64;float3 u=d(i,x);int y=f(i.x,i.y,i.z,64);float3 e=chunksCenter[chunkId];uint s=0;float z=0.;d(u+e,x*.5,y,s,z);float g=x*.25,S=g*.5,M=x*.5,p=rcp(chunkSize*.00390625),D=chunkSize/256,o=chunkSize*.5;int r=y*maxSolidsPerVoxelMask;for(uint m=0;m<maxSolidsPerVoxelMask;++m)solidsFilter[r+m]=-1;float t=c(u+e,x,z+x,s,y);for(uint b=0;b<8;++b){float3 v=u+g*cardinalCellOffset[b];for(uint n=0;n<8;++n){float3 k=v+S*cardinalCellOffset[n];int3 w=int3(round((k.x+o-S)/D),round((k.y+o-S)/D),round((k.z+o-S)/D));int a=f(w.x,w.y,w.z,256);gridData[a]=float3(0,0,0);int l=0;float3 Y=float3(1.,1.,1.);float W=f(k+e,S,p,l,Y,s,y,a);int N=solidsClayObjectId[l]+1;gridData[a]=float3(W,f(Y),N);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void x(int3 i:SV_DispatchThreadID){}float3 a(int3 i,out float3 x){float u=chunkSize/256;int p=f(i.x,i.y,i.z,256);float3 s=gridData[p];x=a(s.y).xyz;float n[8];int e=0,M=0;for(int r=0;r<8;++r){int3 g=i+localGridCellCoords[r];int y=f(g.x,g.y,g.z,256);float3 c=gridData[y];n[r]=c.x;if(c.z==0.){continue;}if(c.x<0.)e|=1<<r;}int g=cubeEdgeFlags[e];float3 c=d(i,u);float t=1.-meshVoxelize;int y=0;float3 k=float3(0,0,0);for(int z=0;z<12;++z){if((g&1<<z)!=0){float S=n[edgeConnection[z].x],D=n[edgeConnection[z].y],o=m(S,D);k+=c+(vertexOffset[edgeConnection[z].x]-o*edgeDirection[z])*u*t;y+=1;}}k/=y;return k;}void a(int3 s[3],uint e,uint x){int3 i=s[0];int p=f(i.x,i.y,i.z,256);for(int r=0;r<MAXBONES;++r){int t=skinBonesGrid[p].w[r];float c=skinWeightsGrid[p].w[r];meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+r]=t;meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+MAXBONES+r]=c;meshOutSkinWeights[x*NUMWEIGHTSELEMENTS+r]=t;meshOutSkinWeights[x*NUMWEIGHTSELEMENTS+MAXBONES+r]=c;}for(int m=1;m<MAXBONES;++m){int t=meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+m];float c=meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+MAXBONES+m];for(int y=m-1;y>=0&&meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+MAXBONES+y]<c;y--){float g=meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+MAXBONES+y];int u=meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+y];meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+MAXBONES+y+1]=g;meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+y+1]=u;meshOutSkinWeights[x*NUMWEIGHTSELEMENTS+MAXBONES+y+1]=g;meshOutSkinWeights[x*NUMWEIGHTSELEMENTS+y+1]=u;}meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+MAXBONES+y+1]=c;meshOutSkinWeights[e*NUMWEIGHTSELEMENTS+y+1]=t;meshOutSkinWeights[x*NUMWEIGHTSELEMENTS+MAXBONES+y+1]=c;meshOutSkinWeights[x*NUMWEIGHTSELEMENTS+y+1]=t;}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMesh(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int p=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[p],x,s,y,z,e=chunksCenter[chunkId],t=a(int3(i.x,i.y,i.z),x)+e,c,m,g,S;int r=f(i.x,i.y+1,i.z+1,256);float3 b=gridData[r];uint n=0,M=0;if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y,i.z+1),s)+e;m=a(int3(i.x,i.y+1,i.z+1),y)+e;g=a(int3(i.x,i.y+1,i.z),z)+e;if(u.x>b.x)S=g,g=c,c=S,S=z,z=s,s=S;n=meshOutIndices.IncrementCounter();int v=n*3;meshOutPoints[v]=t;meshOutIndices[n][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=n*3+1;meshOutPoints[v]=c;meshOutIndices[n][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(s,1);v=n*3+2;meshOutPoints[v]=m;meshOutIndices[n][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);M=meshOutIndices.IncrementCounter();v=M*3;meshOutPoints[v]=t;meshOutIndices[M][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=M*3+1;meshOutPoints[v]=m;meshOutIndices[M][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);v=M*3+2;meshOutPoints[v]=g;meshOutIndices[M][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(z,1);}r=f(i.x+1,i.y,i.z+1,256);b=gridData[r];if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y,i.z+1),s)+e;m=a(int3(i.x+1,i.y,i.z+1),y)+e;g=a(int3(i.x+1,i.y,i.z),z)+e;if(u.x<b.x)S=g,g=c,c=S,S=z,z=s,s=S;n=meshOutIndices.IncrementCounter();int v=n*3;meshOutPoints[v]=t;meshOutIndices[n][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=n*3+1;meshOutPoints[v]=c;meshOutIndices[n][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(s,1);v=n*3+2;meshOutPoints[v]=m;meshOutIndices[n][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);M=meshOutIndices.IncrementCounter();v=M*3;meshOutPoints[v]=t;meshOutIndices[M][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=M*3+1;meshOutPoints[v]=m;meshOutIndices[M][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);v=M*3+2;meshOutPoints[v]=g;meshOutIndices[M][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(z,1);}r=f(i.x+1,i.y+1,i.z,256);b=gridData[r];if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y+1,i.z),s)+e;m=a(int3(i.x+1,i.y+1,i.z),y)+e;g=a(int3(i.x+1,i.y,i.z),z)+e;if(u.x>b.x)S=g,g=c,c=S,S=z,z=s,s=S;n=meshOutIndices.IncrementCounter();int v=n*3;meshOutPoints[v]=t;meshOutIndices[n][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=n*3+1;meshOutPoints[v]=c;meshOutIndices[n][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(s,1);v=n*3+2;meshOutPoints[v]=m;meshOutIndices[n][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);M=meshOutIndices.IncrementCounter();v=M*3;meshOutPoints[v]=t;meshOutIndices[M][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=M*3+1;meshOutPoints[v]=m;meshOutIndices[M][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);v=M*3+2;meshOutPoints[v]=g;meshOutIndices[M][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(z,1);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMeshSkinned2(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int p=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[p],x,s,y,z,e=chunksCenter[chunkId],t=a(int3(i.x,i.y,i.z),x)+e,c,m,g,S;uint r=0,v=0;int n=f(i.x+1,i.y,i.z+1,256);float3 b=gridData[n];if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y,i.z+1),s)+e;m=a(int3(i.x+1,i.y,i.z+1),y)+e;g=a(int3(i.x+1,i.y,i.z),z)+e;if(u.x<b.x)S=g,g=c,c=S,S=z,z=s,s=S;r=meshOutIndices.IncrementCounter();int M=r*3;meshOutPoints[M]=t;meshOutIndices[r][0]=M+outMeshIndexOffset;meshOutColors[M]=float4(x,1);M=r*3+1;meshOutPoints[M]=c;meshOutIndices[r][1]=M+outMeshIndexOffset;meshOutColors[M]=float4(s,1);M=r*3+2;meshOutPoints[M]=m;meshOutIndices[r][2]=M+outMeshIndexOffset;meshOutColors[M]=float4(y,1);v=meshOutIndices.IncrementCounter();M=v*3;meshOutPoints[M]=t;meshOutIndices[v][0]=M+outMeshIndexOffset;meshOutColors[M]=float4(x,1);M=v*3+1;meshOutPoints[M]=m;meshOutIndices[v][1]=M+outMeshIndexOffset;meshOutColors[M]=float4(y,1);M=v*3+2;meshOutPoints[M]=g;meshOutIndices[v][2]=M+outMeshIndexOffset;meshOutColors[M]=float4(z,1);int3 k[3]={int3(i.x,i.y,i.z+1),int3(i.x+1,i.y,i.z+1),int3(i.x+1,i.y,i.z)};a(k,r,v);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMeshSkinned3(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int p=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[p],x,s,y,z,e=chunksCenter[chunkId],t=a(int3(i.x,i.y,i.z),x)+e,c,m,g,S;uint r=0,v=0;int n=f(i.x+1,i.y+1,i.z,256);float3 b=gridData[n];if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y+1,i.z),s)+e;m=a(int3(i.x+1,i.y+1,i.z),y)+e;g=a(int3(i.x+1,i.y,i.z),z)+e;if(u.x>b.x)S=g,g=c,c=S,S=z,z=s,s=S;r=meshOutIndices.IncrementCounter();int M=r*3;meshOutPoints[M]=t;meshOutIndices[r][0]=M+outMeshIndexOffset;meshOutColors[M]=float4(x,1);M=r*3+1;meshOutPoints[M]=c;meshOutIndices[r][1]=M+outMeshIndexOffset;meshOutColors[M]=float4(s,1);M=r*3+2;meshOutPoints[M]=m;meshOutIndices[r][2]=M+outMeshIndexOffset;meshOutColors[M]=float4(y,1);v=meshOutIndices.IncrementCounter();M=v*3;meshOutPoints[M]=t;meshOutIndices[v][0]=M+outMeshIndexOffset;meshOutColors[M]=float4(x,1);M=v*3+1;meshOutPoints[M]=m;meshOutIndices[v][1]=M+outMeshIndexOffset;meshOutColors[M]=float4(y,1);M=v*3+2;meshOutPoints[M]=g;meshOutIndices[v][2]=M+outMeshIndexOffset;meshOutColors[M]=float4(z,1);int3 k[3]={int3(i.x,i.y+1,i.z),int3(i.x+1,i.y+1,i.z),int3(i.x+1,i.y,i.z)};a(k,r,v);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMeshSkinned1(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int p=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[p],x,s,y,z,e=chunksCenter[chunkId],t=a(int3(i.x,i.y,i.z),x)+e,c,m,g,S;int r=f(i.x,i.y+1,i.z+1,256);float3 b=gridData[r];uint v=0,M=0;if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y,i.z+1),s)+e;m=a(int3(i.x,i.y+1,i.z+1),y)+e;g=a(int3(i.x,i.y+1,i.z),z)+e;if(u.x>b.x)S=g,g=c,c=S,S=z,z=s,s=S;v=meshOutIndices.IncrementCounter();int n=v*3;meshOutPoints[n]=t;meshOutIndices[v][0]=n+outMeshIndexOffset;meshOutColors[n]=float4(x,1);n=v*3+1;meshOutPoints[n]=c;meshOutIndices[v][1]=n+outMeshIndexOffset;meshOutColors[n]=float4(s,1);n=v*3+2;meshOutPoints[n]=m;meshOutIndices[v][2]=n+outMeshIndexOffset;meshOutColors[n]=float4(y,1);M=meshOutIndices.IncrementCounter();n=M*3;meshOutPoints[n]=t;meshOutIndices[M][0]=n+outMeshIndexOffset;meshOutColors[n]=float4(x,1);n=M*3+1;meshOutPoints[n]=m;meshOutIndices[M][1]=n+outMeshIndexOffset;meshOutColors[n]=float4(y,1);n=M*3+2;meshOutPoints[n]=g;meshOutIndices[M][2]=n+outMeshIndexOffset;meshOutColors[n]=float4(z,1);int3 k[3]={int3(i.x,i.y,i.z+1),int3(i.x,i.y+1,i.z+1),int3(i.x,i.y+1,i.z)};a(k,v,M);}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 i:SV_DispatchThreadID){int p=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;float x=chunkSize*.00390625*seamOffsetMultiplier,u=chunkSize-x,y=chunkSize*.5;float3 f=float3(-(chunkSize*numChunksX*.5)+y+u*i.x,-(chunkSize*numChunksY*.5)+y+u*i.y,-(chunkSize*numChunksZ*.5)+y+u*i.z);chunksCenter[p]=f;int r=p*3,s=updateChunks[p]-1;if(s<-1)s=-1;int m=0;float g=chunkSize*.5,e=2.-globalBlendReduce;for(uint v=0;v<numSolids;++v){float3 c=f;if(checkMirrorX(solidsAttrs[v].w))c.x=abs(c.x);float3 S=solidsPos[v],z=solidsScale[v];float4 M=solidsRot[v];float3 b=c-S,n=mulQuat(b,M);float k=t(n,z)-e;if(abs(k)<chunkSize*.8){solidsPerChunk[p*maxSolids+m]=v;m+=1;if(s<=0){for(uint o=0;o<numSolidsUpdated;++o){uint w=solidsUpdated[o];if(w==v){s=1;break;}}}}}numSolidsPerChunk[p]=m;uint c=0,M=0;if(s>-1){c=64/MAXTHREADS;M=256/MAXTHREADS;uint n=p*6;boundingBox[n]=64;boundingBox[n+1]=64;boundingBox[n+2]=64;boundingBox[n+3]=0;boundingBox[n+4]=0;boundingBox[n+5]=0;numPointsInChunk[p]=0;}updateChunks[p]=s;indirectChunkArgs1[r]=c;indirectChunkArgs1[r+1]=c;indirectChunkArgs1[r+2]=c;indirectChunkArgs2[r]=M;indirectChunkArgs2[r+1]=M;indirectChunkArgs2[r+2]=M;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloudMicroVoxels(int3 u:SV_DispatchThreadID){int e=f(u.x,u.y,u.z,64);uint x=262144,s=chunkId*x,p=s+e;gridPointersMip2[p]=-1;if(gridDataLowRes[e].x==999.){return;}float3 c=float3(0,0,0),v=float3(0,0,0),M=float3(0,0,0);int y=0;for(uint r=0;r<64;++r){int3 b=cellTable[r],t=int3(u.x*4+b.x,u.y*4+b.y,u.z*4+b.z);uint S=f(uint(b.x),uint(b.y),uint(b.z),4),n=0;float k[8]={0,0,0,0,0,0,0,0};int z=0,D=0;for(int o=0;o<8;++o){int3 w=t+localGridCellCoords[o];if(w.x<1||w.y<1||w.z<1||w.x>253||w.y>253||w.z>253){return;}int l=f(w.x,w.y,w.z,256);float3 a=gridData[l];float Y=a.x;if(Y==0.){continue;}k[o]=Y;if(Y<=0.)n|=1<<o,D=a.z,z=a.y;}int w=cubeEdgeFlags[n];if(w==0){continue;}int l=n*16;float3 a=float3(0,0,0),R=float3(0,0,0);int Y=0;for(int N=0;N<5;++N){int W=N*3,I=triangleConnectionTable[l+W];if(I>-1){float X=m(k[edgeConnection[I].x],k[edgeConnection[I].y]);float3 Z=vertexOffset[edgeConnection[I].x]-X*edgeDirection[I];I=triangleConnectionTable[l+W+1];X=m(k[edgeConnection[I].x],k[edgeConnection[I].y]);float3 C=vertexOffset[edgeConnection[I].x]-X*edgeDirection[I];I=triangleConnectionTable[l+W+2];X=m(k[edgeConnection[I].x],k[edgeConnection[I].y]);float3 h=vertexOffset[edgeConnection[I].x]-X*edgeDirection[I];a+=Z+C+h;R+=cross(h-Z,C-Z);Y+=3;}else{break;}}if(Y>0){a/=Y;float3 W=a-.5;R=normalize(R);float I=dot(W,R);I=I*.5+.5;c+=a;v+=R;float3 h=R;h/=abs(h.x)+abs(h.y)+abs(h.z);h.xy=h.z>=0.?h.xy:i(h.xy);h.xy=h.xy*.5+.5;int3 X=m(z);float3 Z=float3(X.x*.00390625,X.y*.00390625,X.z*.00390625);M+=Z;uint C=d(S,uint(round(I*255.)),uint(round(h.x*255.)),uint(round(h.y*255.))),B=g(uint(round(Z.x*63.)),uint(round(Z.y*63.)),uint(round(Z.z*63.)),D),E=e*128+y*2;prefilteredSolidIds[E]=C;prefilteredSolidIds[E+1]=B;y+=1;}}if(y>0){c/=y;v=normalize(v);M/=y;float3 S=c-.5;float t=dot(S,v);t=t*.5+.5;float3 b=v;b/=abs(b.x)+abs(b.y)+abs(b.z);b.xy=b.z>=0.?b.xy:i(b.xy);b.xy=b.xy*.5+.5;uint n=chunkId*(16777216*bufferSizeReduceFactor),z=0;InterlockedAdd(volumetricDraw[7],64,z);for(uint o=0;o<64;++o)gridPointersMip3[n+z+o]=-1;uint a=0;InterlockedAdd(volumetricDraw[6],y+1,a);uint R=0;for(int k=0;k<y;++k){uint l=e*128+k*2;int2 w=int2(prefilteredSolidIds[l],prefilteredSolidIds[l+1]);pointCloudDataMip3[n+a+k+1]=w;R=w.x>>24;gridPointersMip3[n+z+R]=f(k,a);}uint w=uint(round(b.x*255.)),Y=uint(round(b.y*255.)),D=uint(round(t*255.)),N=d(y,w,Y,D);int2 l=int2(z,N);pointCloudDataMip3[n+a]=l;gridPointersMip2[p]=a;uint I=chunkId*6;InterlockedMin(boundingBox[I],u.x);InterlockedMin(boundingBox[I+1],u.y);InterlockedMin(boundingBox[I+2],u.z);InterlockedMax(boundingBox[I+3],u.x);InterlockedMax(boundingBox[I+4],u.y);InterlockedMax(boundingBox[I+5],u.z);}}[numthreads(1,1,1)]void optimizeMicrovoxels(int3 i:SV_DispatchThreadID){int p=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;bool u=true;uint e=262144;for(uint m=0;m<e;++m){int x=gridPointersMip2[p*e+m];if(x>-1){u=false;break;}}if(u){return;}uint t=0;InterlockedAdd(microvoxelCounters[0],262144,t);chunkIdOffset[p]=t;uint y=p*(16777216*bufferSizeReduceFactor);for(uint r=0;r<e;++r){int x=gridPointersMip2[p*e+r];gridPointersMip2Opt[t+r]=-1;if(x>-1){int z=0;InterlockedAdd(microvoxelCounters[1],64,z);uint M=v(pointCloudDataMip3[y+x].y).x;for(uint o=0;o<64;++o)gridPointersMip3Opt[z+o]=-1;uint n=0;InterlockedAdd(microvoxelCounters[2],M+1,n);for(uint S=0;S<M;++S){int c=pointCloudDataMip3[y+x+S+1].x>>24;gridPointersMip3Opt[z+c]=f(S,n);pointCloudDataMip3Opt[n+S+1]=pointCloudDataMip3[y+x+S+1];}int2 c=int2(z,pointCloudDataMip3[y+n].y);pointCloudDataMip3Opt[n]=c;gridPointersMip2Opt[t+r]=n;}}}inline float3 c(int3 i,float x,float s[8]){int p=f(i.x,i.y,i.z,256);float3 c=gridData[p],u=d(i,x);int r=0,M=0;for(int e=0;e<8;++e){int3 b=i+localGridCellCoords[e];int v=f(b.x,b.y,b.z,256);float3 t=gridData[v];s[e]=t.x;if(t.z==0.){continue;}if(t.x<0.)r|=1<<e;}int g=cubeEdgeFlags[r];float t=1.-meshVoxelize;uint v=0;float3 y=float3(0,0,0);for(int n=0;n<12;++n){if((g&1<<n)!=0){float S=s[edgeConnection[n].x],z=s[edgeConnection[n].y],o=m(S,z);y+=u+(vertexOffset[edgeConnection[n].x]-o*edgeDirection[n])*x*t;v+=1;}}y/=v;return y;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMeshRealTime(int3 i:SV_DispatchThreadID){int p=f(i.x,i.y,i.z,256);smoothMeshGridData[p]=int3(-1,-1,-1);if(i.x>253||i.y>253||i.z>253||i.x<1||i.y<1||i.z<1){return;}int r=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[r],m=0.;float x=chunkSize*.00390625,s[8];float3 e=chunksCenter[chunkId],y=c(int3(i.x,i.y,i.z),x,s)+e,t,g,v,M;r=f(i.x,i.y+1,i.z+1,256);float3 b=gridData[r];uint z=chunkId*maxPointCount;if(sign(u.x)!=sign(b.x)){t=c(int3(i.x,i.y,i.z+1),x,s)+e;g=c(int3(i.x,i.y+1,i.z+1),x,s)+e;v=c(int3(i.x,i.y+1,i.z),x,s)+e;if(u.x>b.x)M=v,v=t,t=M;uint n=0;InterlockedAdd(numPointsInChunk[chunkId],6,n);int o=z+n;meshPoints[o]=y;o=z+n+1;meshPoints[o]=t;o=z+n+2;meshPoints[o]=g;o=z+n+3;meshPoints[o]=y;o=z+n+4;meshPoints[o]=g;o=z+n+5;meshPoints[o]=v;m=cross(t-y,g-y);meshNormalsTemp[n]=m;meshNormalsTemp[n+1]=m;meshNormalsTemp[n+2]=m;meshNormalsTemp[n+3]=m;meshNormalsTemp[n+4]=m;meshNormalsTemp[n+5]=m;smoothMeshGridData[p].x=n;}r=f(i.x+1,i.y,i.z+1,256);b=gridData[r];if(sign(u.x)!=sign(b.x)){t=c(int3(i.x,i.y,i.z+1),x,s)+e;g=c(int3(i.x+1,i.y,i.z+1),x,s)+e;v=c(int3(i.x+1,i.y,i.z),x,s)+e;if(u.x<b.x)M=v,v=t,t=M;uint n=0;InterlockedAdd(numPointsInChunk[chunkId],6,n);int o=z+n;meshPoints[o]=y;o=z+n+1;meshPoints[o]=t;o=z+n+2;meshPoints[o]=g;o=z+n+3;meshPoints[o]=y;o=z+n+4;meshPoints[o]=g;o=z+n+5;meshPoints[o]=v;m=cross(t-y,g-y);meshNormalsTemp[n]=m;meshNormalsTemp[n+1]=m;meshNormalsTemp[n+2]=m;meshNormalsTemp[n+3]=m;meshNormalsTemp[n+4]=m;meshNormalsTemp[n+5]=m;smoothMeshGridData[p].y=n;}r=f(i.x+1,i.y+1,i.z,256);b=gridData[r];if(sign(u.x)!=sign(b.x)){t=c(int3(i.x,i.y+1,i.z),x,s)+e;g=c(int3(i.x+1,i.y+1,i.z),x,s)+e;v=c(int3(i.x+1,i.y,i.z),x,s)+e;if(u.x>b.x)M=v,v=t,t=M;uint n=0;InterlockedAdd(numPointsInChunk[chunkId],6,n);int o=z+n;meshPoints[o]=y;o=z+n+1;meshPoints[o]=t;o=z+n+2;meshPoints[o]=g;o=z+n+3;meshPoints[o]=y;o=z+n+4;meshPoints[o]=g;o=z+n+5;meshPoints[o]=v;m=cross(t-y,g-y);meshNormalsTemp[n]=m;meshNormalsTemp[n+1]=m;meshNormalsTemp[n+2]=m;meshNormalsTemp[n+3]=m;meshNormalsTemp[n+4]=m;meshNormalsTemp[n+5]=m;smoothMeshGridData[p].z=n;}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMeshRealTime2(int3 u:SV_DispatchThreadID){if(u.x>253||u.y>253||u.z>253||u.x<1||u.y<1||u.z<1){return;}int p=f(u.x,u.y,u.z,256);int3 s=smoothMeshGridData[p];if(s.x==-1&&s.y==-1&&s.z==-1){return;}float3 c=gridData[p],t=a(c.y).xyz;float x=meshNormalSmooth*.00555556;int e=lerp(1,27,x);float z=radians(meshNormalSmooth),v=lerp(0.,.005,meshVoxelize);uint n=chunkId*maxPointCount;for(int r=0;r<3;++r){if(s[r]!=-1){uint y=s[r];for(int m=0;m<6;++m){float3 g=meshPoints[n+y+m],M=meshNormalsTemp[y+m],S=normalize(M),b=t;int o=1;for(int R=0;R<e;++R){int3 w=u+neighbourMip3[R];int k=f(w.x,w.y,w.z,256);int3 d=smoothMeshGridData[k];for(int D=0;D<3;++D){if(d[D]!=1){uint l=d[D];for(int I=0;I<6;++I){float3 Y=meshPoints[n+l+I],N=meshNormalsTemp[l+I],W=g-Y;float h=dot(W,W),C=dot(normalize(N),S);if(h<=v&&C<z){M+=N;uint Z=gridData[k].y;b+=a(Z).xyz;o+=1;}}}}}float3 w=M;w/=abs(w.x)+abs(w.y)+abs(w.z);w.xy=w.z>=0.?w.xy:i(w.xy);w.xy=w.xy*.5+.5;b/=o;uint k=f(b);float D=c.z;meshNormals[n+y+m]=float4(w.x,w.y,k,D);}}}}[numthreads(1,1,1)]void compactSmoothMesh(int3 i:SV_DispatchThreadID){int p=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;uint e=numPointsInChunk[p],f;InterlockedAdd(indirectDrawArgs[0],e,f);for(uint m=0;m<e;++m){uint r=f+m;pointToChunkId[r]=p*maxPointCount+m;}}[numthreads(1,1,1)]void optimizeSmoothMesh(int3 i:SV_DispatchThreadID){int p=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;uint e=numPointsInChunk[p],n;InterlockedAdd(indirectDrawArgs[0],e,n);for(uint m=0;m<e;++m)meshPointsOpt[n+m]=meshPoints[p*maxPointCount+m],meshNormalsOpt[n+m]=meshNormals[p*maxPointCount+m];}